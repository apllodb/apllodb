[config]
skip_core_tasks = true
default_to_workspace = false

[tasks.format]
script = ['''
#!/usr/bin/env bash -eux
cargo fmt --all
''']

[tasks.lint]
script = ['''
#!/usr/bin/env bash -eux
RUSTFLAGS='-D warnings' cargo clippy --workspace --all-targets --all-features
''']

[tasks.build]
script = ['''
#!/usr/bin/env bash -eux
RUSTFLAGS='-D warnings' cargo build --workspace --all-targets --all-features
''']

[tasks.test]
script = ['''
#!/usr/bin/env bash -eux
cargo test --workspace --all-targets --all-features
''']

[tasks.test-cli]
script = ['''
#!/usr/bin/env bash -eux
echo 'CREATE DATABASE abc' | ./target/debug/apllodb-cli
''']

[tasks.doc]
script = ['''
#!/usr/bin/env bash -eux
cargo clean --doc
cargo doc --no-deps --all-features
''']

[tasks.coverage]
# see: https://doc.rust-lang.org/nightly/unstable-book/compiler-flags/source-based-code-coverage.html#test-coverage
script = ['''
#!/usr/bin/env bash -eux
export RUSTFLAGS='-Zinstrument-coverage'
export RUSTDOCFLAGS='-Zinstrument-coverage -Zunstable-options --persist-doctests target/debug/doctestbins'
export LLVM_PROFILE_FILE='apllodb-coverage-%m.profraw'

cargo install rustfilt cargo-binutils
cargo test --workspace --all-targets --all-features

cargo profdata -- merge -sparse apllodb-coverage-*.profraw -o apllodb-coverage.profdata

cargo cov -- report --use-color --ignore-filename-regex='/.cargo/registry' \
  $( \
    for file in $( \
      cargo test --tests --no-run --message-format=json \
        | jq -r "select(.profile.test == true) | .filenames[]" \
        | grep -v dSYM - \
    ); \
    do \
      printf "%s %s " -object $file; \
    done \
  ) \
  --instr-profile=apllodb-coverage.profdata --summary-only

cargo cov -- show --use-color --ignore-filename-regex='/.cargo/registry' --show-instantiations --show-line-counts-or-regions --Xdemangler=rustfilt \
  $( \
    for file in $( \
      cargo test --tests --no-run --message-format=json \
        | jq -r "select(.profile.test == true) | .filenames[]" \
        | grep -v dSYM - \
    ); \
    do \
      printf "%s %s " -object $file; \
    done \
  ) \
  --instr-profile=apllodb-coverage.profdata --summary-only

''']

[tasks.check-easy-panic]
script = ['''
#!/usr/bin/env bash -eux
git ls-files |grep -E '.rs$' |(! xargs grep 'unimplemented!')
git ls-files |grep -E '.rs$' |(! xargs grep 'todo!')
''']

[tasks.check-japanese]
script = ['''
#!/usr/bin/env bash -eux
f=$(mktemp)
git ls-files |xargs perl -Mutf8 -CSD -wnle '/[\p{Han}\p{Hiragana}\p{Katakana}]/ and print;' > $f

if [ $(cat $f |wc -l) -ne 0 ]; then
  cat $f
  echo 'ERROR: Some files include Japanese text. To welcome contribution from all over the world, we decided to use only English ðŸ’ª'
  false
fi
''']

[tasks.check-trash]
script = ['''
#!/usr/bin/env bash -eux
if [ ! $(find . -name '*.sqlite3*' |wc -l) = '0' ]; then
    echo 'Trash files:'
    find . -name '*.sqlite3*'
    false
fi
''']

[tasks.clean-trash]
script = ['''
#!/usr/bin/env bash -eux
find . -name '*.sqlite3*' |xargs rm
''']
