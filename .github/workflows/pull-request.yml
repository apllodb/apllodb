name: pull_request

on:
  pull_request:
    types:
      - opened
      - synchronize
  workflow_dispatch:

jobs:
  job-matrix:
    name: ${{ matrix.make.name }} (${{ matrix.rust }}; ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        rust:
          - nightly
          - stable
          - 1.51.0  # MSRV
        make:
          - name: coverage
            task: coverage
        exclude:
          - rust: stable
            make:
              name: coverage
          - rust: 1.51.0
            make:
              name: coverage
    env:
      RUST_BACKTRACE: full
      RUSTC_WRAPPER: sccache
      SCCACHE_CACHE_SIZE: 2G
      SCCACHE_DIR: /home/runner/.cache/sccache
      CACHE_RESET_KEY: 20210508144317
    steps:
      - uses: actions/checkout@v2

      - name: Install sccache (ubuntu-latest)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        env:
          BASE_URL: https://github.com/mozilla/sccache/releases/download
          SCCACHE_VERSION: 0.2.15
        run: |
          SCCACHE_FILE_BASE=sccache-v${SCCACHE_VERSION}-x86_64-unknown-linux-musl
          mkdir -p $HOME/.local/bin
          curl -L "${BASE_URL}/v${SCCACHE_VERSION}/${SCCACHE_FILE_BASE}.tar.gz" | tar xz
          mv -f ${SCCACHE_FILE_BASE}/sccache ${HOME}/.local/bin/sccache
          chmod +x ${HOME}/.local/bin/sccache
          echo "${HOME}/.local/bin" >> ${GITHUB_PATH}

      - name: Install Rust ${{ matrix.rust }}
        if: ${{ ! matrix.rust-free }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          components: llvm-tools-preview
          override: true

      - name: Cache cargo registry
        if: ${{ ! matrix.rust-free }}
        uses: actions/cache@v2
        continue-on-error: false
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ env.CACHE_RESET_KEY }}-${{ runner.os }}-${{ matrix.rust }}-cargo-${{ matrix.make.name }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ env.CACHE_RESET_KEY }}-${{ runner.os }}-${{ matrix.rust }}-cargo-${{ matrix.make.name }}-
            ${{ env.CACHE_RESET_KEY }}-${{ runner.os }}-${{ matrix.rust }}-cargo-

      - name: Save sccache
        if: ${{ ! matrix.rust-free }}
        uses: actions/cache@v2
        continue-on-error: false
        with:
          path: ${{ env.SCCACHE_DIR }}
          key: ${{ env.CACHE_RESET_KEY }}-${{ runner.os }}-${{ matrix.rust }}-sccache-${{ matrix.make.name }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ env.CACHE_RESET_KEY }}-${{ runner.os }}-${{ matrix.rust }}-sccache-${{ matrix.make.name }}-
            ${{ env.CACHE_RESET_KEY }}-${{ runner.os }}-${{ matrix.rust }}-sccache-

      - name: Install cargo-make
        env:
          BASE_URL: https://github.com/sagiegurari/cargo-make/releases/download
          CARGO_MAKE_VERSION: 0.32.17
        run: |
          CARGO_MAKE_FILE_BASE=cargo-make-v${CARGO_MAKE_VERSION}-x86_64-unknown-linux-musl
          mkdir -p ${HOME}/.local/bin
          curl -L "${BASE_URL}/${CARGO_MAKE_VERSION}/${CARGO_MAKE_FILE_BASE}.zip" --output /tmp/cargo-make.zip
          unzip /tmp/cargo-make.zip -d /tmp/cargo-make
          mv -f /tmp/cargo-make/${CARGO_MAKE_FILE_BASE}/cargo-make $HOME/.local/bin/cargo-make
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Start sccache server
        run: sccache --start-server

      - name: ${{ matrix.make.name }}
        run: |
          for task in ${{ matrix.make.task }} ; do
            cargo make ${task}
          done

      - name: Print sccache stats
        run: sccache --show-stats

      - name: Stop sccache server
        run: sccache --stop-server || true

  slack-notify:
    if: always()
    needs:
      - job-matrix
    name: workflow notification to slack
    runs-on: ubuntu-latest
    steps:
      - uses: Gamesight/slack-workflow-status@master
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          slack_webhook_url: ${{ secrets.SLACK_APLLODB_CI_WEBHOOK_URL }}
