name: pull_request

on:
  pull_request:
    types:
      - opened
      - synchronize

jobs:
  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # https://github.com/actions/cache/blob/master/examples.md#rust---cargo
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: rustup override set `cat rust-toolchain`
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          components: rustfmt

      - name: cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: checks if any `todo!()` or `unimplemented!()` is used (to prevent easy server crash)
        run: |
          git ls-files |grep -E '.rs$' |(! xargs grep 'unimplemented!')
          git ls-files |grep -E '.rs$' |(! xargs grep 'todo!')

      - name: rustup override set `cat rust-toolchain`
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          components: clippy

      # https://github.com/actions/cache/blob/master/examples.md#rust---cargo
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: cargo clippy
        uses: actions-rs/cargo@v1
        env:
          RUSTFLAGS: -D warnings
        with:
          command: clippy
          args: --workspace --all-targets --all-features

  test:
    runs-on: ubuntu-latest
    env:
      RUST_LOG: debug
      RUST_BACKTRACE: 1
    strategy:
        matrix:
          rust:
            - ""      # `rust-toolchain`
            - 1.48.0  # MSRV
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/install-apllodb-dep

      # https://github.com/actions-rs/meta/blob/master/recipes/matrix.md
      - name: rustup override set {{ matrix.rust }}
        if: matrix.rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true

      - name: rustup override set `cat rust-toolchain`
        if: matrix.rust == ''
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true

      # https://github.com/actions/cache/blob/master/examples.md#rust---cargo
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: cargo build
        uses: actions-rs/cargo@v1
        env:
          RUSTFLAGS: -D warnings
        with:
          command: build
          args: --all-features --all-targets

      - name: checks if CLI client runs without crash
        run: |
          echo 'CREATE DATABASE abc' | ./target/debug/apllodb-cli
          rm *.sqlite3*

      - name: cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features

      - name: checks if tests clean .sqlite3* files (use SqliteDatabaseCleaner if fails)
        run: |
           [ $(find . -name '*.sqlite3*' |wc -l) = '0' ] || ( find . -name '*.sqlite3*' ; false )

  check_rustdoc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{github.event.pull_request.head.ref}}
                
      - name: rustup override set `cat rust-toolchain`
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
        
      # https://github.com/actions/cache/blob/master/examples.md#rust---cargo
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
      - name: cargo clean --doc
        uses: actions-rs/cargo@v1
        with:
          command: clean
          args: --doc
      - name: cargo doc
        uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --no-deps --all-features
          
      # TODO comment-in
      # - run: cargo install cargo-deadlinks
      # - run: cargo deadlinks

  slack-notify:
    if: always()
    needs:
      - format
      - lint
      - test
      - check_rustdoc
    name: workflow notification to slack
    runs-on: ubuntu-latest
    steps:
      - uses: Gamesight/slack-workflow-status@master
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          slack_webhook_url: ${{ secrets.SLACK_APLLODB_CI_WEBHOOK_URL }}
