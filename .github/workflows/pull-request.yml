name: pull_request

on:
  pull_request:
    types:
      - opened
      - synchronize
  workflow_dispatch:

jobs:
  fmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # https://github.com/actions/cache/blob/master/examples.md#rust---cargo
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: rustup override set `cat rust-toolchain`
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          components: rustfmt, clippy

      - name: Install cargo-make
        env:
          BASE_URL: https://github.com/sagiegurari/cargo-make/releases/download
          CARGO_MAKE_VERSION: 0.32.17
        run: |
          CARGO_MAKE_FILE_BASE=cargo-make-v${CARGO_MAKE_VERSION}-x86_64-unknown-linux-musl
          mkdir -p ${HOME}/.local/bin
          curl -L "${BASE_URL}/${CARGO_MAKE_VERSION}/${CARGO_MAKE_FILE_BASE}.zip" --output /tmp/cargo-make.zip
          unzip /tmp/cargo-make.zip -d /tmp/cargo-make
          mv -f /tmp/cargo-make/${CARGO_MAKE_FILE_BASE}/cargo-make $HOME/.local/bin/cargo-make
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: fmt
        run: cargo make fmt

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # https://github.com/actions/cache/blob/master/examples.md#rust---cargo
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: rustup override set `cat rust-toolchain`
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          components: rustfmt, clippy

      - name: Install cargo-make
        env:
          BASE_URL: https://github.com/sagiegurari/cargo-make/releases/download
          CARGO_MAKE_VERSION: 0.32.17
        run: |
          CARGO_MAKE_FILE_BASE=cargo-make-v${CARGO_MAKE_VERSION}-x86_64-unknown-linux-musl
          mkdir -p ${HOME}/.local/bin
          curl -L "${BASE_URL}/${CARGO_MAKE_VERSION}/${CARGO_MAKE_FILE_BASE}.zip" --output /tmp/cargo-make.zip
          unzip /tmp/cargo-make.zip -d /tmp/cargo-make
          mv -f /tmp/cargo-make/${CARGO_MAKE_FILE_BASE}/cargo-make $HOME/.local/bin/cargo-make
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: lint
        run: cargo make lint

  check-easy-panic:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # # https://github.com/actions/cache/blob/master/examples.md#rust---cargo
      # - uses: actions/cache@v2
      #   with:
      #     path: |
      #       ~/.cargo/registry
      #       ~/.cargo/git
      #       target
      #     key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-cargo-

      # - name: rustup override set `cat rust-toolchain`
      #   uses: actions-rs/toolchain@v1
      #   with:
      #     profile: minimal
      #     override: true
      #     components: rustfmt, clippy

      - name: Install cargo-make
        env:
          BASE_URL: https://github.com/sagiegurari/cargo-make/releases/download
          CARGO_MAKE_VERSION: 0.32.17
        run: |
          CARGO_MAKE_FILE_BASE=cargo-make-v${CARGO_MAKE_VERSION}-x86_64-unknown-linux-musl
          mkdir -p ${HOME}/.local/bin
          curl -L "${BASE_URL}/${CARGO_MAKE_VERSION}/${CARGO_MAKE_FILE_BASE}.zip" --output /tmp/cargo-make.zip
          unzip /tmp/cargo-make.zip -d /tmp/cargo-make
          mv -f /tmp/cargo-make/${CARGO_MAKE_FILE_BASE}/cargo-make $HOME/.local/bin/cargo-make
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: check-easy-panic
        run: cargo make check-easy-panic

  test:
    runs-on: ubuntu-latest
    env:
      RUST_LOG: debug
      RUST_BACKTRACE: 1
    strategy:
        matrix:
          rust:
            - ""      # `rust-toolchain`
            - 1.48.0  # MSRV
    steps:
      - uses: actions/checkout@v2

      # https://github.com/actions/cache/blob/master/examples.md#rust---cargo
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - uses: ./.github/actions/install-apllodb-dep

      # https://github.com/actions-rs/meta/blob/master/recipes/matrix.md
      - name: rustup override set {{ matrix.rust }}
        if: matrix.rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true

      - name: rustup override set `cat rust-toolchain`
        if: matrix.rust == ''
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true

      - name: cargo build
        uses: actions-rs/cargo@v1
        env:
          RUSTFLAGS: -D warnings
        with:
          command: build
          args: --all-features --all-targets

      - name: checks if CLI client runs without crash
        run: |
          echo 'CREATE DATABASE abc' | ./target/debug/apllodb-cli
          rm *.sqlite3*

      - name: cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features

      - name: checks if tests clean .sqlite3* files (use SqliteDatabaseCleaner if fails)
        run: |
           [ $(find . -name '*.sqlite3*' |wc -l) = '0' ] || ( find . -name '*.sqlite3*' ; false )

  check_rustdoc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
                
      # https://github.com/actions/cache/blob/master/examples.md#rust---cargo
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
      - name: rustup override set `cat rust-toolchain`
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true

      - name: cargo clean --doc
        uses: actions-rs/cargo@v1
        with:
          command: clean
          args: --doc
      - name: cargo doc
        uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --no-deps --all-features
          
      # TODO comment-in
      # - run: cargo install cargo-deadlinks
      # - run: cargo deadlinks

  slack-notify:
    if: always()
    needs:
      - fmt
      - lint
      - test
      - check_rustdoc
    name: workflow notification to slack
    runs-on: ubuntu-latest
    steps:
      - uses: Gamesight/slack-workflow-status@master
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          slack_webhook_url: ${{ secrets.SLACK_APLLODB_CI_WEBHOOK_URL }}
