/*
 * Whole syntax definition of apllodb-SQL.
 *
 * This file is written in PEG (Parsing expression grammars) and
 * programmatically parsed by pest (https://github.com/pest-parser/pest).
 *
 * This file consists of sections (decorated with `===...`). andsubsections (decoated with `---...`).
 *
 * The entry point of apllodb-SQL's syntax is `command`.
 * See `Commands` section.
 */

/*
 * ================================================================================================
 * Keywords:
 *
 * Copied from SQL:2016 specification.
 * ================================================================================================
 */

// Beware of substrings.
//   NG) ^"A" | ^"ABSOLUTE"
// In this case, only "A" matches with query `ABSOLUTE` (eager matching).
//
// TODO: Comment-in all. They are commented-out just to make build faster.
keyword = { 
    ^"ABORT"
    | ^"ABSOLUTE"
    // | ^"ABS"
    // | ^"ACOS"
    // | ^"ACTION"
    // | ^"ADA"
    | ^"ADD"
    // | ^"ADMIN"
    // | ^"AFTER"
    // | ^"ALLOCATE"
    // | ^"ALL"
    | ^"ALTER"
    // | ^"ALWAYS"
    | ^"AND"
    // | ^"ANY"
    // | ^"ARE"
    // | ^"ARRAY_AGG"
    // | ^"ARRAY_MAX_CARDINALITY"
    // | ^"ARRAY"
    // | ^"ASC"
    // | ^"ASENSITIVE"
    // | ^"ASIN"
    // | ^"ASSERTION"
    // | ^"ASSIGNMENT"
    // | ^"ASYMMETRIC"
    | ^"AS"
    // | ^"ATAN"
    // | ^"ATOMIC"
    // // | ^"ATTRIBUTES"
    // // | ^"ATTRIBUTE"
    // | ^"AT"
    // | ^"AUTHORIZATION"
    // | ^"AVG"
    // | ^"A"
    // | ^"BEFORE"
    // | ^"BEGIN_FRAME"
    // | ^"BEGIN_PARTITION"
    | ^"BEGIN"
    // | ^"BERNOULLI"
    // | ^"BETWEEN"
    | ^"BIGINT"
    // | ^"BINARY"
    // | ^"BLOB"
    // | ^"BOOLEAN"
    // | ^"BOTH"
    // | ^"BREADTH"
    | ^"BY"
    // | ^"CALLED"
    // | ^"CALL"
    // | ^"CARDINALITY"
    // | ^"CASCADED"
    // | ^"CASCADE"
    // | ^"CASE"
    // | ^"CAST"
    // | ^"CATALOG_NAME"
    // | ^"CATALOG"
    // | ^"CEILING"
    // | ^"CEIL"
    // | ^"CHAINING"
    // | ^"CHAIN"
    // | ^"CHARACTERISTICS"
    // | ^"CHARACTERS"
    // | ^"CHARACTER_LENGTH"
    // | ^"CHARACTER_SET_CATALOG"
    // | ^"CHARACTER_SET_NAME"
    // | ^"CHARACTER_SET_SCHEMA"
    // | ^"CHARACTER"
    // | ^"CHAR_LENGTH"
    // | ^"CHAR"
    // | ^"CHECK"
    // | ^"CLASSIFIER"
    // | ^"CLASS_ORIGIN"
    // | ^"CLOB"
    // | ^"CLOSE"
    // | ^"COALESCE"
    // | ^"COBOL"
    // | ^"COLLATE"
    // | ^"COLLATION_CATALOG"
    // | ^"COLLATION_NAME"
    // | ^"COLLATION_SCHEMA"
    // | ^"COLLATION"
    // | ^"COLLECT"
    // | ^"COLUMNS"
    // | ^"COLUMN_NAME"
    | ^"COLUMN"
    // | ^"COMMAND_FUNCTION_CODE"
    // | ^"COMMAND_FUNCTION"
    // | ^"COMMITTED"
    | ^"COMMIT"
    // | ^"CONDITIONAL"
    // | ^"CONDITION_NUMBER"
    // | ^"CONDITION"
    // | ^"CONNECTION_NAME"
    // | ^"CONNECTION"
    // | ^"CONNECT"
    // | ^"CONSTRAINTS"
    // | ^"CONSTRAINT_CATALOG"
    // | ^"CONSTRAINT_NAME"
    // | ^"CONSTRAINT_SCHEMA"
    // | ^"CONSTRAINT"
    // | ^"CONSTRUCTOR"
    // | ^"CONTAINS"
    // | ^"CONTINUE"
    // | ^"CONVERT"
    // | ^"COPY"
    // | ^"CORRESPONDING"
    // | ^"CORR"
    // | ^"COSH"
    // | ^"COS"
    // | ^"COUNT"
    // | ^"COVAR_POP"
    // | ^"COVAR_SAMP"
    | ^"CREATE"
    // | ^"CROSS"
    // | ^"CUBE"
    // | ^"CUME_DIST"
    // | ^"CURRENT_CATALOG"
    // | ^"CURRENT_DATE"
    // | ^"CURRENT_DEFAULT_TRANSFORM_GROUP"
    // | ^"CURRENT_PATH"
    // | ^"CURRENT_ROLE"
    // | ^"CURRENT_ROW"
    // | ^"CURRENT_SCHEMA"
    // | ^"CURRENT_TIMESTAMP"
    // | ^"CURRENT_TIME"
    // | ^"CURRENT_TRANSFORM_GROUP_FOR_TYPE"
    // | ^"CURRENT_USER"
    // | ^"CURRENT"
    // | ^"CURSOR_NAME"
    // | ^"CURSOR"
    // | ^"CYCLE"
    // | ^"C"
    // | ^"DATA"
    | ^"DATABASE"
    // | ^"DATETIME_INTERVAL_CODE"
    // | ^"DATETIME_INTERVAL_PRECISION"
    // | ^"DATE"
    // | ^"DAY"
    // | ^"DEALLOCATE"
    // | ^"DECFLOAT"
    // | ^"DECIMAL"
    // | ^"DECLARE"
    // | ^"DEC"
    // | ^"DEFAULTS"
    // | ^"DEFAULT"
    // | ^"DEFERRABLE"
    // | ^"DEFERRED"
    // | ^"DEFINED"
    // | ^"DEFINER"
    // | ^"DEFINE"
    // | ^"DEGREE"
    // | ^"DELETE"
    // | ^"DENSE_RANK"
    // | ^"DEPTH"
    // | ^"DEREF"
    // | ^"DERIVED"
    // | ^"DESCRIBE_CATALOG"
    // | ^"DESCRIBE_NAME"
    // | ^"DESCRIBE_PROCEDURE_SPECIFIC_CATALOG"
    // | ^"DESCRIBE_PROCEDURE_SPECIFIC_NAME"
    // | ^"DESCRIBE_PROCEDURE_SPECIFIC_SCHEMA"
    // | ^"DESCRIBE_SCHEMA"
    // | ^"DESCRIBE"
    // | ^"DESCRIPTOR"
    | ^"DESC"
    // | ^"DETERMINISTIC"
    // | ^"DIAGNOSTICS"
    // | ^"DISCONNECT"
    // | ^"DISPATCH"
    // | ^"DISTINCT"
    // | ^"DOMAIN"
    // | ^"DOUBLE"
    | ^"DROP"
    // | ^"DYNAMIC_FUNCTION_CODE"
    // | ^"DYNAMIC_FUNCTION"
    // | ^"DYNAMIC"
    // | ^"EACH"
    // | ^"ELEMENT"
    // | ^"ELSE"
    // | ^"EMPTY"
    // | ^"ENCODING"
    // | ^"END-EXEC"
    // | ^"END_FRAME"
    // | ^"END_PARTITION"
    // | ^"END"
    // | ^"ENFORCED"
    // | ^"EQUALS"
    // | ^"ERROR"
    // | ^"ESCAPE"
    // | ^"EVERY"
    // | ^"EXCEPT"
    // | ^"EXCLUDE"
    // | ^"EXCLUDING"
    // | ^"EXECUTE"
    // | ^"EXEC"
    | ^"EXISTS"
    // | ^"EXPRESSION"
    // | ^"EXP"
    // | ^"EXTERNAL"
    // | ^"EXTRACT"
    // | ^"FALSE"
    // | ^"FETCH"
    // | ^"FILTER"
    // | ^"FINAL"
    // | ^"FINISH_CATALOG"
    // | ^"FINISH_NAME"
    // | ^"FINISH_PROCEDURE_SPECIFIC_CATALOG"
    // | ^"FINISH_PROCEDURE_SPECIFIC_NAME"
    // | ^"FINISH_PROCEDURE_SPECIFIC_SCHEMA"
    // | ^"FINISH_SCHEMA"
    // | ^"FINISH"
    // | ^"FIRST_VALUE"
    // | ^"FIRST"
    // | ^"FLAG"
    // | ^"FLOAT"
    // | ^"FLOOR"
    // | ^"FOLLOWING"
    // | ^"FOREIGN"
    // | ^"FORMAT"
    // | ^"FORTRAN"
    // | ^"FOR"
    // | ^"FOUND"
    // | ^"FRAME_ROW"
    // | ^"FREE"
    | ^"FROM"
    // | ^"FULFILL_CATALOG"
    // | ^"FULFILL_NAME"
    // | ^"FULFILL_PROCEDURE_SPECIFIC_CATALOG"
    // | ^"FULFILL_PROCEDURE_SPECIFIC_NAME"
    // | ^"FULFILL_PROCEDURE_SPECIFIC_SCHEMA"
    // | ^"FULFILL_SCHEMA"
    // | ^"FULFILL"
    // | ^"FULL"
    // | ^"FUNCTION"
    // | ^"FUSION"
    // | ^"GENERAL"
    // | ^"GENERATED"
    // | ^"GET"
    // | ^"GLOBAL"
    // | ^"GOTO"
    // | ^"GO"
    // | ^"GRANTED"
    // | ^"GRANT"
    // | ^"GROUPING"
    // | ^"GROUPS"
    | ^"GROUP"
    // | ^"G"
    // | ^"HAS_PASS_THROUGH_COLUMNS"
    // | ^"HAS_PASS_THRU_COLS"
    | ^"HAVING"
    // | ^"HIERARCHY"
    // | ^"HOLD"
    // | ^"HOUR"
    // | ^"IDENTITY"
    // | ^"IGNORE"
    // | ^"IMMEDIATELY"
    // | ^"IMMEDIATE"
    // | ^"IMPLEMENTATION"
    // | ^"INCLUDING"
    // | ^"INCREMENT"
    // | ^"INDICATOR"
    // | ^"INITIALLY"
    // | ^"INITIAL"
    | ^"INNER"
    // | ^"INOUT"
    // | ^"INPUT"
    // | ^"INSENSITIVE"
    | ^"INSERT"
    // | ^"INSTANCE"
    // | ^"INSTANTIABLE"
    // | ^"INSTEAD"
    // | ^"INTEGER"
    // | ^"INTERSECTION"
    // | ^"INTERSECT"
    // | ^"INTERVAL"
    | ^"INTO"
    | ^"INT"
    // | ^"INVOKER"
    // | ^"IN"
    // | ^"ISOLATION"
    // | ^"IS_PRUNABLE"
    // | ^"IS"
    | ^"JOIN"
    // | ^"JSON_ARRAYAGG"
    // | ^"JSON_ARRAY"
    // | ^"JSON_EXISTS"
    // | ^"JSON_OBJECTAGG"
    // | ^"JSON_OBJECT"
    // | ^"JSON_QUERY"
    // | ^"JSON_TABLE_PRIMITIVE"
    // | ^"JSON_TABLE"
    // | ^"JSON_VALUE"
    // | ^"JSON"
    // | ^"KEEP"
    // | ^"KEYS"
    // | ^"KEY_MEMBER"
    // | ^"KEY_TYPE"
    | ^"KEY"
    // | ^"K"
    // | ^"LAG"
    // | ^"LANGUAGE"
    // | ^"LARGE"
    // | ^"LAST_VALUE"
    // | ^"LAST"
    // | ^"LATERAL"
    // | ^"LEADING"
    // | ^"LEAD"
    // | ^"LEFT"
    // | ^"LENGTH"
    // | ^"LEVEL"
    // | ^"LIKE_REGEX"
    // | ^"LIKE"
    // | ^"LISTAGG"
    // | ^"LN"
    // | ^"LOCALTIMESTAMP"
    // | ^"LOCALTIME"
    // | ^"LOCATOR"
    // | ^"LOCAL"
    // | ^"LOG10"
    // | ^"LOG"
    // | ^"LOWER"
    // | ^"MAP"
    // | ^"MATCHED"
    // | ^"MATCHES"
    // | ^"MATCH_NUMBER"
    // | ^"MATCH_RECOGNIZE"
    // | ^"MATCH"
    // | ^"MAXVALUE"
    // | ^"MAX"
    // | ^"MEMBER"
    // | ^"MERGE"
    // | ^"MESSAGE_LENGTH"
    // | ^"MESSAGE_OCTET_LENGTH"
    // | ^"MESSAGE_TEXT"
    // | ^"METHOD"
    // | ^"MINUTE"
    // | ^"MINVALUE"
    // | ^"MIN"
    // | ^"MODIFIES"
    // | ^"MODULE"
    // | ^"MOD"
    // | ^"MONTH"
    // | ^"MORE"
    // | ^"MULTISET"
    // | ^"MUMPS"
    // | ^"M"
    // | ^"NAMES"
    // | ^"NAME"
    // | ^"NATIONAL"
    // | ^"NATURAL"
    // | ^"NCHAR"
    // | ^"NCLOB"
    // | ^"NESTED"
    // | ^"NESTING"
    // | ^"NEW"
    // | ^"NEXT"
    // | ^"NFC"
    // | ^"NFD"
    // | ^"NFKC"
    // | ^"NFKD"
    // | ^"NONE"
    // | ^"NORMALIZED"
    // | ^"NORMALIZE"
    | ^"NOT"
    // | ^"NO"
    // | ^"NTH_VALUE"
    // | ^"NTILE"
    // | ^"NULLABLE"
    // | ^"NULLIF"
    // | ^"NULLS"
    // | ^"NULL"
    // | ^"NUMBER"
    // | ^"NUMERIC"
    // | ^"OBJECT"
    // | ^"OCCURRENCES_REGEX"
    // | ^"OCTETS"
    // | ^"OCTET_LENGTH"
    // | ^"OFFSET"
    // | ^"OF"
    // | ^"OLD"
    // | ^"OMIT"
    // | ^"ONE"
    // | ^"ONLY"
    // | ^"ON"
    // | ^"OPEN"
    // | ^"OPTIONS"
    // | ^"OPTION"
    // | ^"ORDERING"
    | ^"ORDER"
    // | ^"ORDINALITY"
    | ^"OR"
    // | ^"OTHERS"
    // | ^"OUTER"
    // | ^"OUTPUT"
    // | ^"OUT"
    // | ^"OVERFLOW"
    // | ^"OVERLAPS"
    // | ^"OVERLAY"
    // | ^"OVERRIDING"
    // | ^"OVER"
    // | ^"PAD"
    // | ^"PARAMETER_MODE"
    // | ^"PARAMETER_NAME"
    // | ^"PARAMETER_ORDINAL_POSITION"
    // | ^"PARAMETER_SPECIFIC_CATALOG"
    // | ^"PARAMETER_SPECIFIC_NAME"
    // | ^"PARAMETER_SPECIFIC_SCHEMA"
    // | ^"PARAMETER"
    // | ^"PARTIAL"
    // | ^"PARTITION"
    // | ^"PASCAL"
    // | ^"PASSING"
    // | ^"PASS"
    // | ^"PAST"
    // | ^"PATH"
    // | ^"PATTERN"
    // | ^"PERCENTILE_CONT"
    // | ^"PERCENTILE_DISC"
    // | ^"PERCENT_RANK"
    // | ^"PERCENT"
    // | ^"PERIOD"
    // | ^"PER"
    // | ^"PLACING"
    // | ^"PLAN"
    // | ^"PLI"
    // | ^"PORTION"
    // | ^"POSITION_REGEX"
    // | ^"POSITION"
    // | ^"POWER"
    // | ^"PRECEDES"
    // | ^"PRECEDING"
    // | ^"PRECISION"
    // | ^"PREPARE"
    // | ^"PRESERVE"
    | ^"PRIMARY"
    // | ^"PRIOR"
    // | ^"PRIVATE_PARAMETERS"
    // | ^"PRIVATE_PARAMS_S"
    // | ^"PRIVATE"
    // | ^"PRIVILEGES"
    // | ^"PROCEDURE"
    // | ^"PRUNE"
    // | ^"PTF"
    // | ^"PUBLIC"
    // | ^"P"
    // | ^"QUOTES"
    // | ^"RANGE"
    // | ^"RANK"
    // | ^"READS"
    // | ^"READ"
    // | ^"REAL"
    // | ^"RECURSIVE"
    // | ^"REFERENCES"
    // | ^"REFERENCING"
    // | ^"REF"
    // | ^"REGR_AVGX"
    // | ^"REGR_AVGY"
    // | ^"REGR_COUNT"
    // | ^"REGR_INTERCEPT"
    // | ^"REGR_R2"
    // | ^"REGR_SLOPE"
    // | ^"REGR_SXX"
    // | ^"REGR_SXY"
    // | ^"REGR_SYY"
    // | ^"RELATIVE"
    // | ^"RELEASE"
    // | ^"REPEATABLE"
    // | ^"RESPECT"
    // | ^"RESTART"
    // | ^"RESTRICT"
    // | ^"RESULT"
    // | ^"RETURNED_CARDINALITY"
    // | ^"RETURNED_LENGTH"
    // | ^"RETURNED_OCTET_LENGTH"
    // | ^"RETURNED_SQLSTATE"
    // | ^"RETURNING"
    // | ^"RETURNS_ONLY_PASS_THROUGH"
    // | ^"RETURNS"
    // | ^"RETURN"
    // | ^"RET_ONLY_PASS_THRU"
    // | ^"REVOKE"
    // | ^"RIGHT"
    // | ^"ROLE"
    // | ^"ROLLBACK"
    // | ^"ROLLUP"
    // | ^"ROUTINE_CATALOG"
    // | ^"ROUTINE_NAME"
    // | ^"ROUTINE_SCHEMA"
    // | ^"ROUTINE"
    // | ^"ROWS"
    // | ^"ROW_COUNT"
    // | ^"ROW_NUMBER"
    // | ^"ROW"
    // | ^"RUNNING"
    // | ^"SAVEPOINT"
    // | ^"SCALAR"
    // | ^"SCALE"
    // | ^"SCHEMA_NAME"
    // | ^"SCHEMA"
    // | ^"SCOPE_CATALOG"
    // | ^"SCOPE_NAME"
    // | ^"SCOPE_SCHEMA"
    // | ^"SCOPE"
    // | ^"SCROLL"
    // | ^"SEARCH"
    // | ^"SECOND"
    // | ^"SECTION"
    // | ^"SECURITY"
    // | ^"SEEK"
    | ^"SELECT"
    // | ^"SELF"
    // | ^"SENSITIVE"
    // | ^"SEQUENCE"
    // | ^"SERIALIZABLE"
    // | ^"SERVER_NAME"
    // | ^"SESSION_USER"
    // | ^"SESSION"
    // | ^"SETS"
    | ^"SET"
    // | ^"SHOW"
    // | ^"SIMILAR"
    // | ^"SIMPLE"
    // | ^"SINH"
    // | ^"SIN"
    // | ^"SIZE"
    // | ^"SKIP"
    | ^"SMALLINT"
    // | ^"SOME"
    // | ^"SOURCE"
    // | ^"SPACE"
    // | ^"SPECIFICTYPE"
    // | ^"SPECIFIC_NAME"
    // | ^"SPECIFIC"
    // | ^"SQLEXCEPTION"
    // | ^"SQLSTATE"
    // | ^"SQLWARNING"
    // | ^"SQL"
    // | ^"SQRT"
    // | ^"START_CATALOG"
    // | ^"START_NAME"
    // | ^"START_PROCEDURE_SPECIFIC_CATALOG"
    // | ^"START_PROCEDURE_SPECIFIC_NAME"
    // | ^"START_PROCEDURE_SPECIFIC_SCHEMA"
    // | ^"START_SCHEMA"
    // | ^"START"
    // | ^"STATEMENT"
    // | ^"STATE"
    // | ^"STATIC"
    // | ^"STDDEV_POP"
    // | ^"STDDEV_SAMP"
    // | ^"STRING"
    // | ^"STRUCTURE"
    // | ^"STYLE"
    // | ^"SUBCLASS_ORIGIN"
    // | ^"SUBMULTISET"
    // | ^"SUBSET"
    // | ^"SUBSTRING_REGEX"
    // | ^"SUBSTRING"
    // | ^"SUCCEEDS"
    // | ^"SUM"
    // | ^"SYMMETRIC"
    // | ^"SYSTEM_TIME"
    // | ^"SYSTEM_USER"
    // | ^"SYSTEM"
    // | ^"TABLESAMPLE"
    // | ^"TABLE_NAME"
    // | ^"TABLE_SEMANTICS"
    | ^"TABLE"
    // | ^"TANH"
    // | ^"TAN"
    // | ^"TEMPORARY"
    | "TEXT"
    // | ^"THEN"
    // | ^"THROUGH"
    // | ^"TIES"
    // | ^"TIMESTAMP"
    // | ^"TIMEZONE_HOUR"
    // | ^"TIMEZONE_MINUTE"
    // | ^"TIME"
    // | ^"TOP_LEVEL_COUNT"
    // | ^"TO"
    // | ^"TRAILING"
    // | ^"TRANSACTIONS_COMMITTED"
    // | ^"TRANSACTIONS_ROLLED_BACK"
    // | ^"TRANSACTION_ACTIVE"
    | ^"TRANSACTION"
    // | ^"TRANSFORMS"
    // | ^"TRANSFORM"
    // | ^"TRANSLATE_REGEX"
    // | ^"TRANSLATE"
    // | ^"TRANSLATION"
    // | ^"TREAT"
    // | ^"TRIGGER_CATALOG"
    // | ^"TRIGGER_NAME"
    // | ^"TRIGGER_SCHEMA"
    // | ^"TRIGGER"
    // | ^"TRIM_ARRAY"
    // | ^"TRIM"
    // | ^"TRUE"
    // | ^"TRUNCATE"
    // | ^"TYPE"
    // | ^"T"
    // | ^"UESCAPE"
    // | ^"UNBOUNDED"
    // | ^"UNCOMMITTED"
    // | ^"UNCONDITIONAL"
    // | ^"UNDER"
    // | ^"UNION"
    // | ^"UNIQUE"
    // | ^"UNKNOWN"
    // | ^"UNNAMED"
    // | ^"UNNEST"
    | ^"UPDATE"
    // | ^"UPPER"
    // | ^"USAGE"
    // | ^"USER_DEFINED_TYPE_CATALOG"
    // | ^"USER_DEFINED_TYPE_CODE"
    // | ^"USER_DEFINED_TYPE_NAME"
    // | ^"USER_DEFINED_TYPE_SCHEMA"
    // | ^"USER"
    | ^"USE"
    // | ^"USING"
    // | ^"UTF16"
    // | ^"UTF32"
    // | ^"UTF8"
    | ^"VALUES"
    // | ^"VALUE_OF"
    // | ^"VALUE"
    // | ^"VARBINARY"
    // | ^"VARCHAR"
    // | ^"VARYING"
    // | ^"VAR_POP"
    // | ^"VAR_SAMP"
    // | ^"VERSIONING"
    // | ^"VIEW"
    // | ^"WHENEVER"
    // | ^"WHEN"
    | ^"WHERE"
    // | ^"WIDTH_BUCKET"
    // | ^"WINDOW"
    // | ^"WITHIN"
    // | ^"WITHOUT"
    // | ^"WITH"
    // | ^"WORK"
    // | ^"WRAPPER"
    // | ^"WRITE"
    // | ^"YEAR"
    // | ^"ZONE"
}

/*
 * ================================================================================================
 * Lexical Structure:
 *
 * Defined almost independently from other SQL syntaxes.
 * This provides the ability to use UTF-8 characters for objects name like
 * table names and column names.
 * ================================================================================================
 */

WHITESPACE = _{ " " | "\t" | NEWLINE } // TODO: add `FORM FEED`

sql_language_character = _{
    rich_utf8_letter
    | DECIMAL_NUMBER
}

sql_special_character = _{
    "!"
    | "\""
    | "#"
    | "$"
    | "%"
    | "&"
    | "'"
    | "("
    | ")"
    | "*"
    | "+"
    | ","
    | "-"
    | "."
    | "/"
    | ":"
    | ";"
    | "<"
    | "="
    | ">"
    | "?"
    | "@"
    | "["
    | "\\"
    | "]"
    | "^"
    | "`"
    | "{"
    | "|"
    | "}"
    | "~"
}

// Enables intuitive table / column names even for non-native English speakers.
//
// See:
// pest's built-in character classes: https://pest.rs/book/grammars/built-ins.html#general-categories
// Unicode's General Category: http://www.unicode.org/reports/tr44/#General_Category_Values
rich_utf8_letter = _{
    !sql_special_character ~ (
        LETTER
        | MARK
        | PUNCTUATION
        | SYMBOL
        | LETTER_NUMBER
        | OTHER_NUMBER
    )
}

string_character = _{
    !"\""
    ~ ANY
}

/*
 * ----------------------------------------------------------------------------
 * Constants
 * (https://www.postgresql.org/docs/12/sql-syntax-lexical.html#SQL-SYNTAX-CONSTANTS)
 * ----------------------------------------------------------------------------
 */

constant = {
    numeric_constant
    | string_constant
}

numeric_constant = {
    integer_constant
}

integer_constant = @{
    DECIMAL_NUMBER+
}

string_constant = {
    "\"" ~ string_content ~ "\""
}

string_content = @{
    string_character*
}

/*
 * ----------------------------------------------------------------------------
 * Operators
 * (https://www.postgresql.org/docs/12/sql-syntax-lexical.html#SQL-SYNTAX-OPERATORS)
 * ----------------------------------------------------------------------------
 */

unary_operator = {
    "-"
}

/*
 * ================================================================================================
 * Identifier:
 *
 * Defined independently from other SQL syntaxes.
 * ================================================================================================
 */

identifier = @{
    // does not start with a keyword.
    (
        !keyword ~ (
            identifier_start ~ identifier_part*
        )
    )
    // starts with a keyword but followed by other letters.
    | ( keyword ~ identifier_part+ )
}

identifier_start = _{
    rich_utf8_letter
}

identifier_part = _{
    identifier_start
    | DECIMAL_NUMBER
}

/*
 * ================================================================================================
 * Value Expressions:
 *
 * Extracted subset of terms and categories from PostgreSQL
 * (https://www.postgresql.org/docs/12/sql-expressions.html).
 * ================================================================================================
 */

condition = {
    expression
}

expression = {
    constant
    | column_reference
    | (unary_operator ~ expression)
}

/*
 * ----------------------------------------------------------------------------
 * Column References
 * (https://www.postgresql.org/docs/12/sql-expressions.html#SQL-EXPRESSIONS-COLUMN-REFS)
 * ----------------------------------------------------------------------------
 */

column_reference = {
    (correlation ~ ".")? ~ column_name
}

/*
 * ================================================================================================
 * Data Types:
 *
 * Extracted subset of terms and categories from PostgreSQL
 * (https://www.postgresql.org/docs/12/datatype.html).
 * ================================================================================================
 */

data_type = {
    integer_type
    | character_type
}

/*
 * ----------------------------------------------------------------------------
 * Integer Types
 * (https://www.postgresql.org/docs/12/datatype-numeric.html#DATATYPE-INT)
 * ----------------------------------------------------------------------------
 */

integer_type = {
    ^"SMALLINT"
    | ^"INTEGER"
    | ^"BIGINT"
}

/*
 * ----------------------------------------------------------------------------
 * Character Types
 * (https://www.postgresql.org/docs/12/datatype-character.html)
 * ----------------------------------------------------------------------------
 */

character_type = {
    ^"TEXT"
}

/*
 * ================================================================================================
 * Commands:
 *
 * Basically extracted subset of terms and categories from PostgreSQL
 * (https://www.postgresql.org/docs/12/sql-commands.html).
 *
 * Term names are sometimes modified from PostgreSQL command documents for more commonality.
 * (e.g. `name` in DROP TABLE -> `table_name`)
 * ================================================================================================
 */

// The entry point of apllodb-SQL.
command = {
    SOI ~ (
        create_database_command
        | use_database_command

        | begin_transaction_command
        | commit_transaction_command
        | abort_transaction_command

        | alter_table_command
        | create_table_command
        | drop_table_command

        | select_command
        | insert_command
        | update_command
        | delete_command
    )
    ~ ";"?
    ~ EOI
}

/*
 * ----------------------------------------------------------------------------
 * CREATE DATABASE (not originally from PostgreSQL)
 * ----------------------------------------------------------------------------
 */

create_database_command = {
    ^"CREATE" ~ ^"DATABASE"
    ~ database_name
}

/*
 * ----------------------------------------------------------------------------
 * USE DATABASE (not originally from PostgreSQL)
 * ----------------------------------------------------------------------------
 */

use_database_command = {
    ^"USE" ~ ^"DATABASE"
    ~ database_name
}

/*
 * ----------------------------------------------------------------------------
 * BEGIN (https://www.postgresql.org/docs/current/sql-begin.html)
 * ----------------------------------------------------------------------------
 */

begin_transaction_command = {
    ^"BEGIN" ~ ^"TRANSACTION"?
}

/*
 * ----------------------------------------------------------------------------
 * COMMIT (https://www.postgresql.org/docs/12/sql-commit.html)
 * ----------------------------------------------------------------------------
 */

commit_transaction_command = {
    ^"COMMIT" ~ ^"TRANSACTION"?
}

/*
 * ----------------------------------------------------------------------------
 * ABORT (https://www.postgresql.org/docs/12/sql-abort.html)
 * ----------------------------------------------------------------------------
 */

abort_transaction_command = {
    ^"ABORT" ~ ^"TRANSACTION"?
}

/*
 * ----------------------------------------------------------------------------
 * ALTER TABLE (https://www.postgresql.org/docs/12/sql-altertable.html)
 * ----------------------------------------------------------------------------
 */

alter_table_command = {
    ^"ALTER" ~ ^"TABLE"
    ~ table_name
    ~ action ~ ("," ~ action)*
}

action = {
    add_column
    | drop_column
}

add_column = {
    ^"ADD" ~ ^"COLUMN"? ~ column_definition
}

drop_column = {
    ^"DROP" ~ ^"COLUMN"? ~ column_name
}

/*
 * ----------------------------------------------------------------------------
 * CREATE TABLE (https://www.postgresql.org/docs/12/sql-createtable.html)
 * ----------------------------------------------------------------------------
 */

create_table_command = {
    ^"CREATE" ~ ^"TABLE"
    ~ table_name
    ~ "("
    ~ table_element ~ ("," ~ table_element)*
    ~ ")"
}

/*
 * ----------------------------------------------------------------------------
 * DELETE (https://www.postgresql.org/docs/12/sql-delete.html)
 * ----------------------------------------------------------------------------
 */

delete_command = {
    ^"DELETE" ~ ^"FROM"
    ~ table_name
    ~ (^"AS" ~ alias)?
    ~ (^"WHERE" ~ condition)?
}

/*
 * ----------------------------------------------------------------------------
 * DROP TABLE (https://www.postgresql.org/docs/12/sql-droptable.html)
 * ----------------------------------------------------------------------------
 */

drop_table_command = {
    ^"DROP" ~ ^"TABLE"
    ~ table_name
}

/*
 * ----------------------------------------------------------------------------
 * INSERT (https://www.postgresql.org/docs/12/sql-insert.html)
 * ----------------------------------------------------------------------------
 */

insert_command = {
    ^"INSERT" ~ ^"INTO"
    ~ table_name
    ~ (^"AS" ~ alias)?
    ~ "(" ~ column_name ~ ("," ~ column_name)* ~ ")"
    ~ ^"VALUES" ~ "(" ~ expression ~ ("," ~ expression)* ~ ")"
}

/*
 * ----------------------------------------------------------------------------
 * SELECT (https://www.postgresql.org/docs/12/sql-select.html)
 * ----------------------------------------------------------------------------
 */

select_command = {
    ^"SELECT"
    ~ select_field ~ ("," ~ select_field)*
    ~ (^"FROM" ~ from_item ~ ("," ~ from_item)*)?
    ~ (^"WHERE" ~ condition)?
    ~ (^"GROUP" ~ "BY" ~ grouping_element ~ ("," ~ grouping_element)*)?
    ~ (^"HAVING" ~ condition ~ ("," ~ condition)*)?
    ~ (^"ORDER" ~ "BY" ~ order_by ~ ("," ~ order_by)*)?
}

select_field = {
    expression ~ (^"AS"? ~ alias)?
}

from_item = {
    table_name ~ (^"AS"? ~ alias)?
}

grouping_element = {
    expression
}

order_by = {
    expression ~ ordering?
}

ordering = {
    ^"ASC" | ^"DESC"
}

/*
 * ----------------------------------------------------------------------------
 * UPDATE (https://www.postgresql.org/docs/12/sql-update.html)
 * ----------------------------------------------------------------------------
 */

update_command = {
    ^"UPDATE"
    ~ table_name
    ~ (^"AS" ~ alias)?
    ~ ^"SET"
    ~ column_name ~ "=" ~ expression
    ~ (^"WHERE" ~ condition)?
}

/*
 * ================================================================================================
 * Misc:
 * Terms commonly used by multiple commands.
 * Defined independently from other SQL syntaxes.
 * ================================================================================================
 */

/*
 * ----------------------------------------------------------------------------
 * Names
 * ----------------------------------------------------------------------------
 */

database_name = {
    identifier
}

table_name = {
    identifier
}

column_name = {
    identifier
}

alias = {
    identifier
}

correlation = {
    table_name
    | alias
}

/*
 * ----------------------------------------------------------------------------
 * Table Elements
 * ----------------------------------------------------------------------------
 */

table_element = {
    column_definition
    | table_constraint
}

/*
 * ----------------------------------------------------------------------------
 * Constraints
 * ----------------------------------------------------------------------------
 */

column_constraint = {
    ^"NOT NULL"
}

table_constraint = {
    ^"PRIMARY" ~ ^"KEY"
    ~ "("
    ~ column_name ~ ("," ~ column_name)*
    ~ ")"
}

/*
 * ----------------------------------------------------------------------------
 * Column Definitions
 * ----------------------------------------------------------------------------
 */

column_definition = {
    column_name
    ~ data_type
    ~ column_constraint*
}
