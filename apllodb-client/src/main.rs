#![deny(warnings, missing_debug_implementations)]

//! apllodb's client bin crate.

use apllodb_rpc_interface::ApllodbRpcClient;
use clap::{App, Arg};
use std::{io, net::SocketAddr};
use tarpc::{client, context};
use tokio_serde::formats::Bincode;

#[tokio::main]
async fn main() -> io::Result<()> {
    env_logger::init();

    let flags = App::new("apllodb-client")
        .arg(
            Arg::with_name("server_addr")
                .long("server_addr")
                .value_name("ADDRESS")
                .help("Sets the server address to connect to.")
                .required(true)
                .takes_value(true),
        )
        .get_matches();

    let server_addr = flags.value_of("server_addr").unwrap();
    let server_addr = server_addr
        .parse::<SocketAddr>()
        .unwrap_or_else(|e| panic!(r#"--server_addr value "{}" invalid: {}"#, server_addr, e));

    let mut transport = tarpc::serde_transport::tcp::connect(server_addr, Bincode::default);
    transport.config_mut().max_frame_length(4294967296);

    // WorldClient is generated by the service attribute. It has a constructor `new` that takes a
    // config and any Transport as input.
    let mut client = ApllodbRpcClient::new(client::Config::default(), transport.await?).spawn()?;

    // The client has an RPC method for each RPC defined in the annotated trait. It takes the same
    // args as defined, with the addition of a Context, which is always the first arg. The Context
    // specifies a deadline and trace information which can be helpful in debugging requests.
    let hello = client
        .command(
            context::current(),
            "CREATE TABLE t (id INTEGER, age SMALLINT, PRIMARY KEY (id))".to_string(),
        )
        .await?;

    println!("{:?}", hello);

    Ok(())
}
