/*
 * Use similar elements' name and categorization to:
 * https://jakewheat.github.io/sql-overview/sql-2016-foundation-grammar.html
 */

/*
 * ----------------------------------------------
 * 5.1 <SQL terminal character>
 * ----------------------------------------------
 */

sql_language_character = _{
    rich_utf8_letter
    | DECIMAL_NUMBER
}

sql_special_character = _{
    "!"
    | "\""
    | "#"
    | "$"
    | "%"
    | "&"
    | "'"
    | "("
    | ")"
    | "*"
    | "+"
    | ","
    | "-"
    | "."
    | "/"
    | ":"
    | ";"
    | "<"
    | "="
    | ">"
    | "?"
    | "@"
    | "["
    | "\\"
    | "]"
    | "^"
    | "`"
    | "{"
    | "|"
    | "}"
    | "~"
}

// Enables intuitive table / column names even for non-native English speakers.
//
// See:
// pest's built-in character classes: https://pest.rs/book/grammars/built-ins.html#general-categories
// Unicode's General Category: http://www.unicode.org/reports/tr44/#General_Category_Values
rich_utf8_letter = _{
    !sql_special_character ~ (
        LETTER
        | MARK
        | PUNCTUATION
        | SYMBOL
        | LETTER_NUMBER
        | OTHER_NUMBER
    )
}

/*
 * ----------------------------------------------
 * 5.2 <token> and <separator>
 * ----------------------------------------------
 */

WHITESPACE = _{ " " | "\t" | NEWLINE } // TODO: add `FORM FEED`

// Beware of substrings.
//   NG) "A" | "ABSOLUTE"
// In this case, only "A" matches with query `ABSOLUTE` (eager matching).
//
// TODO: Comment-in all. They are commented-out just to make build faster.
key_word = { 
    "ABSOLUTE"
    // | "ABS"
    // | "ACOS"
    // | "ACTION"
    // | "ADA"
    | "ADD"
    // | "ADMIN"
    // | "AFTER"
    // | "ALLOCATE"
    // | "ALL"
    | "ALTER"
    // | "ALWAYS"
    | "AND"
    // | "ANY"
    // | "ARE"
    // | "ARRAY_AGG"
    // | "ARRAY_MAX_CARDINALITY"
    // | "ARRAY"
    // | "ASC"
    // | "ASENSITIVE"
    // | "ASIN"
    // | "ASSERTION"
    // | "ASSIGNMENT"
    // | "ASYMMETRIC"
    | "AS"
    // | "ATAN"
    // | "ATOMIC"
    // // | "ATTRIBUTES"
    // // | "ATTRIBUTE"
    // | "AT"
    // | "AUTHORIZATION"
    // | "AVG"
    // | "A"
    // | "BEFORE"
    // | "BEGIN_FRAME"
    // | "BEGIN_PARTITION"
    // | "BEGIN"
    // | "BERNOULLI"
    // | "BETWEEN"
    // | "BIGINT"
    // | "BINARY"
    // | "BLOB"
    // | "BOOLEAN"
    // | "BOTH"
    // | "BREADTH"
    | "BY"
    // | "CALLED"
    // | "CALL"
    // | "CARDINALITY"
    // | "CASCADED"
    // | "CASCADE"
    // | "CASE"
    // | "CAST"
    // | "CATALOG_NAME"
    // | "CATALOG"
    // | "CEILING"
    // | "CEIL"
    // | "CHAINING"
    // | "CHAIN"
    // | "CHARACTERISTICS"
    // | "CHARACTERS"
    // | "CHARACTER_LENGTH"
    // | "CHARACTER_SET_CATALOG"
    // | "CHARACTER_SET_NAME"
    // | "CHARACTER_SET_SCHEMA"
    // | "CHARACTER"
    // | "CHAR_LENGTH"
    // | "CHAR"
    // | "CHECK"
    // | "CLASSIFIER"
    // | "CLASS_ORIGIN"
    // | "CLOB"
    // | "CLOSE"
    // | "COALESCE"
    // | "COBOL"
    // | "COLLATE"
    // | "COLLATION_CATALOG"
    // | "COLLATION_NAME"
    // | "COLLATION_SCHEMA"
    // | "COLLATION"
    // | "COLLECT"
    // | "COLUMNS"
    // | "COLUMN_NAME"
    | "COLUMN"
    // | "COMMAND_FUNCTION_CODE"
    // | "COMMAND_FUNCTION"
    // | "COMMITTED"
    // | "COMMIT"
    // | "CONDITIONAL"
    // | "CONDITION_NUMBER"
    // | "CONDITION"
    // | "CONNECTION_NAME"
    // | "CONNECTION"
    // | "CONNECT"
    // | "CONSTRAINTS"
    // | "CONSTRAINT_CATALOG"
    // | "CONSTRAINT_NAME"
    // | "CONSTRAINT_SCHEMA"
    // | "CONSTRAINT"
    // | "CONSTRUCTOR"
    // | "CONTAINS"
    // | "CONTINUE"
    // | "CONVERT"
    // | "COPY"
    // | "CORRESPONDING"
    // | "CORR"
    // | "COSH"
    // | "COS"
    // | "COUNT"
    // | "COVAR_POP"
    // | "COVAR_SAMP"
    | "CREATE"
    // | "CROSS"
    // | "CUBE"
    // | "CUME_DIST"
    // | "CURRENT_CATALOG"
    // | "CURRENT_DATE"
    // | "CURRENT_DEFAULT_TRANSFORM_GROUP"
    // | "CURRENT_PATH"
    // | "CURRENT_ROLE"
    // | "CURRENT_ROW"
    // | "CURRENT_SCHEMA"
    // | "CURRENT_TIMESTAMP"
    // | "CURRENT_TIME"
    // | "CURRENT_TRANSFORM_GROUP_FOR_TYPE"
    // | "CURRENT_USER"
    // | "CURRENT"
    // | "CURSOR_NAME"
    // | "CURSOR"
    // | "CYCLE"
    // | "C"
    // | "DATA"
    // | "DATETIME_INTERVAL_CODE"
    // | "DATETIME_INTERVAL_PRECISION"
    // | "DATE"
    // | "DAY"
    // | "DEALLOCATE"
    // | "DECFLOAT"
    // | "DECIMAL"
    // | "DECLARE"
    // | "DEC"
    // | "DEFAULTS"
    // | "DEFAULT"
    // | "DEFERRABLE"
    // | "DEFERRED"
    // | "DEFINED"
    // | "DEFINER"
    // | "DEFINE"
    // | "DEGREE"
    // | "DELETE"
    // | "DENSE_RANK"
    // | "DEPTH"
    // | "DEREF"
    // | "DERIVED"
    // | "DESCRIBE_CATALOG"
    // | "DESCRIBE_NAME"
    // | "DESCRIBE_PROCEDURE_SPECIFIC_CATALOG"
    // | "DESCRIBE_PROCEDURE_SPECIFIC_NAME"
    // | "DESCRIBE_PROCEDURE_SPECIFIC_SCHEMA"
    // | "DESCRIBE_SCHEMA"
    // | "DESCRIBE"
    // | "DESCRIPTOR"
    | "DESC"
    // | "DETERMINISTIC"
    // | "DIAGNOSTICS"
    // | "DISCONNECT"
    // | "DISPATCH"
    // | "DISTINCT"
    // | "DOMAIN"
    // | "DOUBLE"
    | "DROP"
    // | "DYNAMIC_FUNCTION_CODE"
    // | "DYNAMIC_FUNCTION"
    // | "DYNAMIC"
    // | "EACH"
    // | "ELEMENT"
    // | "ELSE"
    // | "EMPTY"
    // | "ENCODING"
    // | "END-EXEC"
    // | "END_FRAME"
    // | "END_PARTITION"
    // | "END"
    // | "ENFORCED"
    // | "EQUALS"
    // | "ERROR"
    // | "ESCAPE"
    // | "EVERY"
    // | "EXCEPT"
    // | "EXCLUDE"
    // | "EXCLUDING"
    // | "EXECUTE"
    // | "EXEC"
    | "EXISTS"
    // | "EXPRESSION"
    // | "EXP"
    // | "EXTERNAL"
    // | "EXTRACT"
    // | "FALSE"
    // | "FETCH"
    // | "FILTER"
    // | "FINAL"
    // | "FINISH_CATALOG"
    // | "FINISH_NAME"
    // | "FINISH_PROCEDURE_SPECIFIC_CATALOG"
    // | "FINISH_PROCEDURE_SPECIFIC_NAME"
    // | "FINISH_PROCEDURE_SPECIFIC_SCHEMA"
    // | "FINISH_SCHEMA"
    // | "FINISH"
    // | "FIRST_VALUE"
    // | "FIRST"
    // | "FLAG"
    // | "FLOAT"
    // | "FLOOR"
    // | "FOLLOWING"
    // | "FOREIGN"
    // | "FORMAT"
    // | "FORTRAN"
    // | "FOR"
    // | "FOUND"
    // | "FRAME_ROW"
    // | "FREE"
    | "FROM"
    // | "FULFILL_CATALOG"
    // | "FULFILL_NAME"
    // | "FULFILL_PROCEDURE_SPECIFIC_CATALOG"
    // | "FULFILL_PROCEDURE_SPECIFIC_NAME"
    // | "FULFILL_PROCEDURE_SPECIFIC_SCHEMA"
    // | "FULFILL_SCHEMA"
    // | "FULFILL"
    // | "FULL"
    // | "FUNCTION"
    // | "FUSION"
    // | "GENERAL"
    // | "GENERATED"
    // | "GET"
    // | "GLOBAL"
    // | "GOTO"
    // | "GO"
    // | "GRANTED"
    // | "GRANT"
    // | "GROUPING"
    // | "GROUPS"
    | "GROUP"
    // | "G"
    // | "HAS_PASS_THROUGH_COLUMNS"
    // | "HAS_PASS_THRU_COLS"
    // | "HAVING"
    // | "HIERARCHY"
    // | "HOLD"
    // | "HOUR"
    // | "IDENTITY"
    // | "IGNORE"
    // | "IMMEDIATELY"
    // | "IMMEDIATE"
    // | "IMPLEMENTATION"
    // | "INCLUDING"
    // | "INCREMENT"
    // | "INDICATOR"
    // | "INITIALLY"
    // | "INITIAL"
    | "INNER"
    // | "INOUT"
    // | "INPUT"
    // | "INSENSITIVE"
    | "INSERT"
    // | "INSTANCE"
    // | "INSTANTIABLE"
    // | "INSTEAD"
    // | "INTEGER"
    // | "INTERSECTION"
    // | "INTERSECT"
    // | "INTERVAL"
    | "INTO"
    | "INT"
    // | "INVOKER"
    // | "IN"
    // | "ISOLATION"
    // | "IS_PRUNABLE"
    // | "IS"
    | "JOIN"
    // | "JSON_ARRAYAGG"
    // | "JSON_ARRAY"
    // | "JSON_EXISTS"
    // | "JSON_OBJECTAGG"
    // | "JSON_OBJECT"
    // | "JSON_QUERY"
    // | "JSON_TABLE_PRIMITIVE"
    // | "JSON_TABLE"
    // | "JSON_VALUE"
    // | "JSON"
    // | "KEEP"
    // | "KEYS"
    // | "KEY_MEMBER"
    // | "KEY_TYPE"
    // | "KEY"
    // | "K"
    // | "LAG"
    // | "LANGUAGE"
    // | "LARGE"
    // | "LAST_VALUE"
    // | "LAST"
    // | "LATERAL"
    // | "LEADING"
    // | "LEAD"
    // | "LEFT"
    // | "LENGTH"
    // | "LEVEL"
    // | "LIKE_REGEX"
    // | "LIKE"
    // | "LISTAGG"
    // | "LN"
    // | "LOCALTIMESTAMP"
    // | "LOCALTIME"
    // | "LOCATOR"
    // | "LOCAL"
    // | "LOG10"
    // | "LOG"
    // | "LOWER"
    // | "MAP"
    // | "MATCHED"
    // | "MATCHES"
    // | "MATCH_NUMBER"
    // | "MATCH_RECOGNIZE"
    // | "MATCH"
    // | "MAXVALUE"
    // | "MAX"
    // | "MEMBER"
    // | "MERGE"
    // | "MESSAGE_LENGTH"
    // | "MESSAGE_OCTET_LENGTH"
    // | "MESSAGE_TEXT"
    // | "METHOD"
    // | "MINUTE"
    // | "MINVALUE"
    // | "MIN"
    // | "MODIFIES"
    // | "MODULE"
    // | "MOD"
    // | "MONTH"
    // | "MORE"
    // | "MULTISET"
    // | "MUMPS"
    // | "M"
    // | "NAMES"
    // | "NAME"
    // | "NATIONAL"
    // | "NATURAL"
    // | "NCHAR"
    // | "NCLOB"
    // | "NESTED"
    // | "NESTING"
    // | "NEW"
    // | "NEXT"
    // | "NFC"
    // | "NFD"
    // | "NFKC"
    // | "NFKD"
    // | "NONE"
    // | "NORMALIZED"
    // | "NORMALIZE"
    | "NOT"
    // | "NO"
    // | "NTH_VALUE"
    // | "NTILE"
    // | "NULLABLE"
    // | "NULLIF"
    // | "NULLS"
    // | "NULL"
    // | "NUMBER"
    // | "NUMERIC"
    // | "OBJECT"
    // | "OCCURRENCES_REGEX"
    // | "OCTETS"
    // | "OCTET_LENGTH"
    // | "OFFSET"
    // | "OF"
    // | "OLD"
    // | "OMIT"
    // | "ONE"
    // | "ONLY"
    // | "ON"
    // | "OPEN"
    // | "OPTIONS"
    // | "OPTION"
    // | "ORDERING"
    | "ORDER"
    // | "ORDINALITY"
    | "OR"
    // | "OTHERS"
    // | "OUTER"
    // | "OUTPUT"
    // | "OUT"
    // | "OVERFLOW"
    // | "OVERLAPS"
    // | "OVERLAY"
    // | "OVERRIDING"
    // | "OVER"
    // | "PAD"
    // | "PARAMETER_MODE"
    // | "PARAMETER_NAME"
    // | "PARAMETER_ORDINAL_POSITION"
    // | "PARAMETER_SPECIFIC_CATALOG"
    // | "PARAMETER_SPECIFIC_NAME"
    // | "PARAMETER_SPECIFIC_SCHEMA"
    // | "PARAMETER"
    // | "PARTIAL"
    // | "PARTITION"
    // | "PASCAL"
    // | "PASSING"
    // | "PASS"
    // | "PAST"
    // | "PATH"
    // | "PATTERN"
    // | "PERCENTILE_CONT"
    // | "PERCENTILE_DISC"
    // | "PERCENT_RANK"
    // | "PERCENT"
    // | "PERIOD"
    // | "PER"
    // | "PLACING"
    // | "PLAN"
    // | "PLI"
    // | "PORTION"
    // | "POSITION_REGEX"
    // | "POSITION"
    // | "POWER"
    // | "PRECEDES"
    // | "PRECEDING"
    // | "PRECISION"
    // | "PREPARE"
    // | "PRESERVE"
    // | "PRIMARY"
    // | "PRIOR"
    // | "PRIVATE_PARAMETERS"
    // | "PRIVATE_PARAMS_S"
    // | "PRIVATE"
    // | "PRIVILEGES"
    // | "PROCEDURE"
    // | "PRUNE"
    // | "PTF"
    // | "PUBLIC"
    // | "P"
    // | "QUOTES"
    // | "RANGE"
    // | "RANK"
    // | "READS"
    // | "READ"
    // | "REAL"
    // | "RECURSIVE"
    // | "REFERENCES"
    // | "REFERENCING"
    // | "REF"
    // | "REGR_AVGX"
    // | "REGR_AVGY"
    // | "REGR_COUNT"
    // | "REGR_INTERCEPT"
    // | "REGR_R2"
    // | "REGR_SLOPE"
    // | "REGR_SXX"
    // | "REGR_SXY"
    // | "REGR_SYY"
    // | "RELATIVE"
    // | "RELEASE"
    // | "REPEATABLE"
    // | "RESPECT"
    // | "RESTART"
    // | "RESTRICT"
    // | "RESULT"
    // | "RETURNED_CARDINALITY"
    // | "RETURNED_LENGTH"
    // | "RETURNED_OCTET_LENGTH"
    // | "RETURNED_SQLSTATE"
    // | "RETURNING"
    // | "RETURNS_ONLY_PASS_THROUGH"
    // | "RETURNS"
    // | "RETURN"
    // | "RET_ONLY_PASS_THRU"
    // | "REVOKE"
    // | "RIGHT"
    // | "ROLE"
    // | "ROLLBACK"
    // | "ROLLUP"
    // | "ROUTINE_CATALOG"
    // | "ROUTINE_NAME"
    // | "ROUTINE_SCHEMA"
    // | "ROUTINE"
    // | "ROWS"
    // | "ROW_COUNT"
    // | "ROW_NUMBER"
    // | "ROW"
    // | "RUNNING"
    // | "SAVEPOINT"
    // | "SCALAR"
    // | "SCALE"
    // | "SCHEMA_NAME"
    // | "SCHEMA"
    // | "SCOPE_CATALOG"
    // | "SCOPE_NAME"
    // | "SCOPE_SCHEMA"
    // | "SCOPE"
    // | "SCROLL"
    // | "SEARCH"
    // | "SECOND"
    // | "SECTION"
    // | "SECURITY"
    // | "SEEK"
    | "SELECT"
    // | "SELF"
    // | "SENSITIVE"
    // | "SEQUENCE"
    // | "SERIALIZABLE"
    // | "SERVER_NAME"
    // | "SESSION_USER"
    // | "SESSION"
    // | "SETS"
    | "SET"
    // | "SHOW"
    // | "SIMILAR"
    // | "SIMPLE"
    // | "SINH"
    // | "SIN"
    // | "SIZE"
    // | "SKIP"
    // | "SMALLINT"
    // | "SOME"
    // | "SOURCE"
    // | "SPACE"
    // | "SPECIFICTYPE"
    // | "SPECIFIC_NAME"
    // | "SPECIFIC"
    // | "SQLEXCEPTION"
    // | "SQLSTATE"
    // | "SQLWARNING"
    // | "SQL"
    // | "SQRT"
    // | "START_CATALOG"
    // | "START_NAME"
    // | "START_PROCEDURE_SPECIFIC_CATALOG"
    // | "START_PROCEDURE_SPECIFIC_NAME"
    // | "START_PROCEDURE_SPECIFIC_SCHEMA"
    // | "START_SCHEMA"
    // | "START"
    // | "STATEMENT"
    // | "STATE"
    // | "STATIC"
    // | "STDDEV_POP"
    // | "STDDEV_SAMP"
    // | "STRING"
    // | "STRUCTURE"
    // | "STYLE"
    // | "SUBCLASS_ORIGIN"
    // | "SUBMULTISET"
    // | "SUBSET"
    // | "SUBSTRING_REGEX"
    // | "SUBSTRING"
    // | "SUCCEEDS"
    // | "SUM"
    // | "SYMMETRIC"
    // | "SYSTEM_TIME"
    // | "SYSTEM_USER"
    // | "SYSTEM"
    // | "TABLESAMPLE"
    // | "TABLE_NAME"
    // | "TABLE_SEMANTICS"
    | "TABLE"
    // | "TANH"
    // | "TAN"
    // | "TEMPORARY"
    // | "THEN"
    // | "THROUGH"
    // | "TIES"
    // | "TIMESTAMP"
    // | "TIMEZONE_HOUR"
    // | "TIMEZONE_MINUTE"
    // | "TIME"
    // | "TOP_LEVEL_COUNT"
    // | "TO"
    // | "TRAILING"
    // | "TRANSACTIONS_COMMITTED"
    // | "TRANSACTIONS_ROLLED_BACK"
    // | "TRANSACTION_ACTIVE"
    // | "TRANSACTION"
    // | "TRANSFORMS"
    // | "TRANSFORM"
    // | "TRANSLATE_REGEX"
    // | "TRANSLATE"
    // | "TRANSLATION"
    // | "TREAT"
    // | "TRIGGER_CATALOG"
    // | "TRIGGER_NAME"
    // | "TRIGGER_SCHEMA"
    // | "TRIGGER"
    // | "TRIM_ARRAY"
    // | "TRIM"
    // | "TRUE"
    // | "TRUNCATE"
    // | "TYPE"
    // | "T"
    // | "UESCAPE"
    // | "UNBOUNDED"
    // | "UNCOMMITTED"
    // | "UNCONDITIONAL"
    // | "UNDER"
    // | "UNION"
    // | "UNIQUE"
    // | "UNKNOWN"
    // | "UNNAMED"
    // | "UNNEST"
    | "UPDATE"
    // | "UPPER"
    // | "USAGE"
    // | "USER_DEFINED_TYPE_CATALOG"
    // | "USER_DEFINED_TYPE_CODE"
    // | "USER_DEFINED_TYPE_NAME"
    // | "USER_DEFINED_TYPE_SCHEMA"
    // | "USER"
    // | "USING"
    // | "UTF16"
    // | "UTF32"
    // | "UTF8"
    | "VALUES"
    // | "VALUE_OF"
    // | "VALUE"
    // | "VARBINARY"
    // | "VARCHAR"
    // | "VARYING"
    // | "VAR_POP"
    // | "VAR_SAMP"
    // | "VERSIONING"
    // | "VIEW"
    // | "WHENEVER"
    // | "WHEN"
    | "WHERE"
    // | "WIDTH_BUCKET"
    // | "WINDOW"
    // | "WITHIN"
    // | "WITHOUT"
    // | "WITH"
    // | "WORK"
    // | "WRAPPER"
    // | "WRITE"
    // | "YEAR"
    // | "ZONE"
}

/*
 * ----------------------------------------------
 * 5.4 Names and identifiers
 * ----------------------------------------------
 */

identifier = @{
    // does not start with a keyword.
    (
        !key_word ~ (
            identifier_start ~ identifier_part*
        )
    )
    // starts with a keyword but followed by other letters.
    | ( key_word ~ identifier_part+ )
}

identifier_start = _{
    rich_utf8_letter
}

identifier_part = _{
    identifier_start
    | DECIMAL_NUMBER
}

table_name = _{
    identifier
}

column_name = _{
    identifier
}

/*
 * ----------------------------------------------
 * 6.3 <value expression primary>
 * ----------------------------------------------
 */

value_expression_primary = {
    parenthesized_value_expression
    | nonparenthesized_value_expression_primary
}

parenthesized_value_expression = {
    "(" ~ value_expression ~ ")"
}

nonparenthesized_value_expression_primary = {
    column_reference
}


/*
 * ----------------------------------------------
 * 6.7 <column reference>
 * ----------------------------------------------
 */

column_reference = {
    identifier
}

/*
 * ----------------------------------------------
 * 6.28 <value expression>
 * ----------------------------------------------
 */

value_expression = {
    common_value_expression
}

common_value_expression = {
    reference_value_expression
}

reference_value_expression = {
    value_expression_primary
}

/*
 * ----------------------------------------------
 * 7.4 <table expression>
 * ----------------------------------------------
 */

table_expression = {
    from_clause
}

/*
 * ----------------------------------------------
 * 7.5 <from clause>
 * ----------------------------------------------
 */

from_clause = {
    "FROM" ~ table_name
}

/*
 * ----------------------------------------------
 * 7.16 <query specification>
 * ----------------------------------------------
 */

query_specification = {
    "SELECT" ~ select_list ~ table_expression
}

select_list = {
    select_sublist ~ ("," ~ select_sublist)*
}

select_sublist = {
    value_expression ~ as_clause*
}

as_clause = {
    "AS"? ~ column_name
}

/*
 * ----------------------------------------------
 * 7.17 <query expression>
 * ----------------------------------------------
 */

query_expression = {
    query_expression_body
}

/*
 * ----------------------------------------------
 * 11.31 <drop table statement>
 * ----------------------------------------------
 */

drop_table_statement = {
    "DROP" ~ "TABLE" ~ table_name
}

/*
 * ----------------------------------------------
 * 13.4 <SQL procedure statement>
 * ----------------------------------------------
 */

sql_executable_statement = {
    sql_schema_statement
}

sql_schema_statement = {
    sql_schema_manipulation_statement
}

sql_schema_manipulation_statement = {
    drop_table_statement
}

/*
 * ----------------------------------------------
 * 14 <with clause> ::=
 * ----------------------------------------------
 */

query_expression_body = {
    query_term
}

query_term = {
    query_primary
}

query_primary = {
    simple_table
}

simple_table = {
    query_specification
}

/*
 * ----------------------------------------------
 * 20.7 <prepare statement>
 * ----------------------------------------------
 */

// ENTRY POINT for prepared statement.
preparable_statement = {
    preparable_sql_data_statement
}

preparable_sql_data_statement = {
    dynamic_select_statement
}

dynamic_select_statement = {
    query_expression
}

/*
 * ----------------------------------------------
 * 21.1 <embedded SQL host program>
 * ----------------------------------------------
 */

// ENTRY POINT
embedded_sql_statement = {
    SOI
    ~ statement_or_declaration ~ ";"?
    ~ EOI
}

statement_or_declaration = {
    sql_executable_statement
}
